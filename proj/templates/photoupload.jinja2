    <!doctype html>
    <html lang="en">

    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Upload Images</title>
        {{ dropzone.load_css() }}
        {{ dropzone.load_js() }}
        {{ dropzone.config() }}
        <script>
            const rootURL = "{{ request.url_root }}";
            Dropzone.options.myDropzone = {
                chunking: true,
                chunkSize: 2000000, // Size of chunks in bytes (here, 2 MB)
                parallelChunkUploads: true, // Whether to upload chunks in parallel (might increase load on server)
                addRemoveLinks: true,
                init: function() {
                    // Reference to Dropzone instance
                    const myDropzone = this;

                    // Data for pre-uploaded images from Flask
                    let existingFiles = {{ uploaded_files|tojson|safe }};
                    console.log("existingFiles")
                    console.log(existingFiles)

                    // Loop through each existing file data
                    existingFiles.forEach(function(file) {
                        // Create a default file object
                        let mockFile = {
                            name: file.name,
                            size: file.size,
                            type: `image/${file.extension}`, // or whichever type you're working with
                            status: Dropzone.ADDED,
                            accepted: true,
                            url: file.url // if you have URLs
                        };

                        // Manually register file in Dropzone
                        myDropzone.files.push(mockFile);
                        
                        // Manually add file to the view
                        myDropzone.emit("addedfile", mockFile);

                        // If the file has a URL, visually append it in the dropzone area
                        if (mockFile.url) {
                            myDropzone.emit("thumbnail", mockFile, `${rootURL}${mockFile.url}`);
                        }

                        // If needed, show the remove button
                        myDropzone.emit("complete", mockFile);
                        console.log('myDropzone')
                        console.log(myDropzone)
                    });


                    this.on("removedfile", function(file) {
                        // Make an AJAX request to server to delete file
                        fetch("{{ url_for('photoviewer.remove_image') }}", {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded'
                                {# ,'X-CSRFToken': '{{ csrf_token() }}' #}
                            },
                            body: 'filename=' + encodeURIComponent(file.name),
                        })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok' + response.statusText);
                            }
                            return response.json();
                        })
                        .then(data => {
                            console.log("File has been successfully removed!!");
                        })
                        .catch((error) => {
                            console.error('There has been a problem with your fetch operation:', error);
                        });

                    });

                    {# 
                    this.on("sending", function(file, xhr, formData){
                        // Append CSRF token to the formData
                        formData.append("csrf_token", "{{ csrf_token() }}");
                    });
                    #}

                }
            };
        </script>
    </head>

    <body>
        {% if ACTIVE_SESSION %}
        
            <h1>Upload Images</h1>
            {{ dropzone.create(action=url_for("photoviewer.photoupload")) }}
            {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
            <ul>
                {% for category, message in messages %}
                <li class="{{ category }}">{{ message }}</li>
                {% endfor %}
            </ul>
            {% endif %}
            {% endwith %}

        {% else %}
        
            <p>It appears you have not signed in with the login form for the checker application.</p>
            <p>Please visit the <a href="{{url_for('homepage.index')}}">checker application home page</a> and begin there</p>
 
        {% endif %}
    </body>

    <style>
        .dropzone .dz-preview .dz-image img {
            object-fit: contain;
            width: 100%;
            height: 100%;
        }

    </style>
    </html>